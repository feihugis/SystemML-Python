from src.pyspark_sc import *
import systemml as sml
from systemml import MLContext, dml
import numpy as np

def backward_check():
    script = """
             source("nn/test/grad_check.dml") as grad_check
             out = grad_check::cross_entropy_loss2d()
             """

    ml = MLContext(sc)

    prog = dml(script)

    out = ml.execute(prog)

def forward_check():
    script = """
             source("nn/layers/cross_entropy_loss2d.dml") as cross_entropy_loss2d
             loss = cross_entropy_loss2d::forward(pred, y, 3)
             """
    array_softmax = np.array([[[9.99909163e-01, 4.53958055e-05, 4.53958055e-05],
                               [4.99988675e-01, 4.99988675e-01, 2.26994507e-05],
                               [4.53958055e-05, 4.53958055e-05, 9.99909163e-01],
                               [9.99909163e-01, 4.53958055e-05, 4.53958055e-05],
                               [4.53958055e-05, 9.99909163e-01, 4.53958055e-05],
                               [4.53958055e-05, 4.53958055e-05, 9.99909163e-01],
                               [9.99909163e-01, 4.53958055e-05, 4.53958055e-05],
                               [4.53958055e-05, 9.99909163e-01, 4.53958055e-05],
                               [4.53958055e-05, 4.53958055e-05, 9.99909163e-01]],
                              [[9.99909163e-01, 4.53958055e-05, 4.53958055e-05],
                               [4.99988675e-01, 4.99988675e-01, 2.26994507e-05],
                               [4.53958055e-05, 4.53958055e-05, 9.99909163e-01],
                               [9.99909163e-01, 4.53958055e-05, 4.53958055e-05],
                               [4.53958055e-05, 9.99909163e-01, 4.53958055e-05],
                               [4.53958055e-05, 4.53958055e-05, 9.99909163e-01],
                               [9.99909163e-01, 4.53958055e-05, 4.53958055e-05],
                               [4.53958055e-05, 9.99909163e-01, 4.53958055e-05],
                               [4.53958055e-05, 4.53958055e-05, 9.99909163e-01]]]).reshape([2, 3, 3, 3]).transpose([0, 3, 1, 2]).reshape(2, 27)
    input = np.array([[[10.0, 0.0, 0.0],
                      [10.0, 10.0, 0.0],
                      [0.0, 0.0, 10.0],
                      [10.0, 0.0, 0.0],
                     [0.0, 10.0, 0.0],
                       [0.0, 0.0, 10.0],
                       [10.0, 0.0, 0.0],
                       [0.0, 10.0, 0.0],
                       [0.0, 0.0, 10.0]],
                       [[10.0, 0.0, 0.0],
                       [10.0, 10.0, 0.0],
                       [0.0, 0.0, 10.0],
                       [10.0, 0.0, 0.0],
                       [0.0, 10.0, 0.0],
                       [0.0, 0.0, 10.0],
                       [10.0, 0.0, 0.0],
                       [0.0, 10.0, 0.0],
                                   [0.0, 0.0, 10.0]]]).reshape([2, 3, 3, 3]).transpose([0, 3, 1, 2]).reshape(2, 27)

    y = np.array([[[1, 0, 0],
                   [0, 1, 0],
                   [0, 0, 1],
                   [1, 0, 0],
                   [0, 1, 0],
                   [0, 0, 1],
                   [1, 0, 0],
                   [0, 1, 0],
                   [0, 0, 1]],
                  [[1, 0, 0],
                   [0, 1, 0],
                   [0, 0, 1],
                   [1, 0, 0],
                   [0, 1, 0],
                   [0, 0, 1],
                   [1, 0, 0],
                   [0, 1, 0],
                   [0, 0, 1]]]).reshape([2, 3, 3, 3]).transpose([0, 3, 1, 2]).reshape(2, 27)
    print(input, array_softmax, y)

    ml = MLContext(sc)
    prog = dml(script).input(pred=array_softmax, y=y).output("loss")
    loss = ml.execute(prog).get("loss")
    print(loss)

if __name__ == "__main__":
    forward_check()


